service: apigateway-poc-func
plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  - serverless-deployment-bucket

custom:
  serverless-offline:  
    stageVariables:
      stage: "dev"  
  bundle:
      ignorePackages:
        - pg-native
  deploymentBucket:
      versioning: true
      accelerate: true
      blockPublicAccess: true
      tags:
        - Key: Environment
          Value: development
  prune:
    automatic: true
    number: 5
  dotenv:
    include:
      - LOG_LEVEL
      - LANDING_ZONE_BUCKET  
provider:
  name: aws
  region: eu-west-1
  runtime: nodejs16.x
  deploymentBucket:
    name: apigateway-${opt:stage}-deployments
    serverSideEncryption: AES256
    IamRoleStatements:   
    - Effect: 'Allow'
      Action:
       - 'lambda:InvokeFunction'
       - 'ses:SendEmail'
       - 'ses:SendRawEmail'
       - 'logs:CreateLogGroup'
       - 'logs:CreateLogStream'
       - 'logs:PutLogEvents'
      Resource: '*'
functions:
  healthcheck:
    handler: dist/functions/router.handler
    events:
      - http:
          name: ${opt:stage}-healthcheck
          path: healthcheck
          method: get
          private: true
          # authorizer:
          #   arn: '${file(environment.yml):AUTHORIZER_LAMBDA_ARN}'
          #   resultTtlInSeconds: 0
          #   identitySource: method.request.header.Authorization, method.request.header.PlatformTenantId, context.identity.sourceIp
          #   identityValidationExpression: someRegex
          #   type: request
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-a
              - X-Amz-Security-Token
              - X-Amz-User-Agent             
package:
  artifact: ${opt:artifact,""}
  exclude:
    - ./**/*
    - "!node_modules/**/*"
  include:
    - config/**
    - dist/**/*.js