service: apigateway-poc-func
plugins:
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  - serverless-deployment-bucket

custom:
  deploymentBucket:
      versioning: true
      accelerate: true
      blockPublicAccess: true
      tags:
        - Key: Environment
          Value: development
  prune:
    automatic: true
    number: 5
  dotenv:
    include:
      - LOG_LEVEL
      - LANDING_ZONE_BUCKET
      - UPLOAD_ADDRESS_QUEUE_URL     
provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  deploymentBucket:
    name: apigateway-${env:STAGE}-deployments
    #name: apigateway-poc-func-deployments
    serverSideEncryption: AES256
  stage: ${env:STAGE}
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "sqs:SendMessage"
  #       - "sqs:GetQueueUrl"
  #       - "sqs:ListQueues"
  #     Resource:
  #       - ${env:UPLOAD_ADDRESS_QUEUE_ARN}
  #       - ${env:UPLOAD_ADDRESS_MAPPING_QUEUE_ARN}       
  #   - Effect: "Allow"
  #     Action:
  #       - "s3:GetObject"
  #     Resource: arn:aws:s3:::${env:LANDING_ZONE_BUCKET}/*

functions:
  # router:
  #   handler: dist/functions/router.handler
  #   name: sync-router-func
  #   tracing: Active
    # events:
    #   - s3:
    #       bucket: ${env:LANDING_ZONE_BUCKET}
    #       event: s3:ObjectCreated:*
    #       existing: true
  createUser:
    handler: dist/functions/createUser.handler
    events:
      - http:
          path: users/create
          method: post
          private: true
          # authorizer:
          #   arn: '${file(environment.yml):AUTHORIZER_LAMBDA_ARN}'
          #   resultTtlInSeconds: 0
          #   identitySource: method.request.header.Authorization, method.request.header.PlatformTenantId, context.identity.sourceIp
          #   identityValidationExpression: someRegex
          #   type: request
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-a
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - PlatformTenantId
  hello:
    handler: dist/functions/hello.handler
    events:
      - http:
          path: users/hello
          method: get
          private: true
          # authorizer:
          #   arn: '${file(environment.yml):AUTHORIZER_LAMBDA_ARN}'
          #   resultTtlInSeconds: 0
          #   identitySource: method.request.header.Authorization, method.request.header.PlatformTenantId, context.identity.sourceIp
          #   identityValidationExpression: someRegex
          #   type: request
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-a
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - PlatformTenantId              
package:
  artifact: ${opt:artifact,""}
  exclude:
    - ./**/*
    - "!node_modules/**/*"
  include:
    - config/**
    - dist/**/*.js
